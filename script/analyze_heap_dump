#!/usr/bin/env ruby

$:.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib'))
require 'erb'
require 'fileutils'
require 'optparse'
require 'ostruct'

$DEBUG = false

class Node
  attr_accessor :name, :object_type, :count, :children, :clazz, :size

  class << self
    def create(filename)
      root = new('', nil)
      File.open(filename).each_line do |line|
        begin
          if line =~ /^([^:]*):(.*?):(\d+)(:(.*?)(:(\d+))?)?$/
            root.add_node($1, $2, $3, $5, $7)
          else
            $stderr.puts "rejected #{line}" if $DEBUG
          end
        rescue => e
          # ruby 1.9 sometime throws ArgumentError: invalid utf-8 string
          # TODO: figure out why some strings in the dump file are broken
          $stderr.puts "exception during parsing: #{e}"
          $stderr.puts "could not parse line: #{line}" rescue nil
        end
      end
      root.children.each {|k, n| n.shrink!}
      root
    end
  end

  def initialize(name, object_type)
    self.name = name
    self.object_type = object_type
    self.count = 0
    self.size = 0
    self.children = {}
  end

  def add_node(object_type, path, line, clazz, size)
    $stderr.puts "adding node (#{object_type}, #{path}, #{line}, #{clazz}, #{size})" if $DEBUG
    segments = path.split('/').reject{|s| s.empty?}
    path = ''
    self.count += 1
    node = (self.children[object_type] ||= Node.new(path, object_type))
    node.count += 1
    segments.each do |s|
      path = "#{path}/#{s}"
      node = (node.children[s] ||= Node.new(path, object_type))
      node.count += 1
    end
    node.clazz = clazz
    node.size += size.to_i if size
  end

  def shrink!
    while children.size==1
      k = children.keys.first
      son = children[k]
      self.name = son.name
      self.children = son.children
      self.clazz = son.clazz
      self.size = son.size
    end
    children.each{|k,n| n.shrink!}
  end

  def sorted_children
    children.keys.sort_by{|k| -children[k].count}.map{|k| [k, children[k]]}
  end

  def leaves(result=[])
    if children.size==0
      result << self
    else
      children.each{|k, n| n.leaves(result)}
    end
    result
  end

  def hotspots_by_file
    (@leaves ||= leaves).sort_by{|n| [-n.count, n.name]}
  end

  def hotspots_by_class
    @leaves ||= leaves
    spots = Hash.new{|h,k| h[k] = [0,0]}
    @leaves.each do |n|
      p = spots[n.clazz]
      p[0] += n.count
      p[1] += n.size
    end
    spots.to_a.sort_by{|k,(c,s)| [-c, k]}
  end
end

class HeapPrinter
  include ERB::Util

  def initialize(node)
     @result = node
  end

  def ths(n)
    n.to_s.gsub(/(\d)(?=\d{3}+(?:\.|$))(\d{3}\..*)?/,'\1,\2')
  end

  def print(options = {})
    @options = options
    @options[:filename] += ".html" unless @options[:filename] =~ /.html$/
    @output = File.open(@options[:filename], "w")
    @hotspot_filename = @options[:filename].sub(/.html$/, ".hotspots_by_file.txt")
    @clazz_hotspots_filename = @hotspot_filename.sub('by_file', 'by_class')

    print_header
    # puts @result.inspect
    @result.sorted_children.each do |object_type, node|
      @object_type_count = node.count
      @output.print "<div class=\"thread\">Object Type: #{object_type} (#{"%4.2f%%" % ((@object_type_count.to_f/@result.count)*100)}) [#{ths @object_type_count} instances]</div>"
      @output.print "<ul name=\"thread\">"
      node.sorted_children.each do |k,n|
        print_tree n, @object_type_count
      end
      @output.print "</ul>"
    end
    print_footer
    copy_image_files

    @output.close
    print_hotspots
    print_class_hotspots
  end

  def print_hotspots
    File.open(@hotspot_filename, "w") do |f|
      f.printf "%5s  %5s %9s %9s %10s  %s\n", "Total", "Self", "Count", "Size", "Type", "File"
      running_total = 0.0
      @result.hotspots_by_file.each do |n|
        percent = (n.count.to_f/@result.count)*100
        running_total += percent
        size = ths(n.size) if n.size > 0
        f.printf "%5.2f  %5.2f %9s %9s %10s  %s\n",
           running_total, percent, ths(n.count), size, n.object_type, n.name
      end
    end
  end

  def print_class_hotspots
    File.open(@clazz_hotspots_filename, "w") do |f|
      f.printf "%5s  %5s %9s %9s %s\n", "Total", "Self", "Count", "Size", "Class"
      running_total = 0.0
      @result.hotspots_by_class.each do |clazz, (count, size)|
        percent = (count.to_f/@result.count)*100
        running_total += percent
        nsize = ths(size) if size > 0
        f.printf "%5.2f  %5.2f %9s %9s %s\n",
           running_total, percent, ths(count), nsize, clazz
      end
    end
  end

  def print_tree(node, parent_count)
    total_count = node.count
    percent_parent = (total_count.to_f/parent_count)*100
    percent_total = (total_count.to_f/@object_type_count)*100
    return unless percent_total > min_percent
    color = self.color(percent_total)
    kids = node.sorted_children
    visible = percent_total >= threshold
    expanded = percent_total >= expansion
    display = visible ? "block" : "none"
    @output.print "<li class=\"color#{color}\" style=\"display:#{display}\">"
    if kids.empty?
      @output.print "<img src=\"empty.png\">"
    else
      visible_children = kids.any?{|k,n| (n.count.to_f/@object_type_count)*100 >= threshold}
      image = visible_children ? (expanded ? "minus" : "plus") : "empty"
      @output.print "<img class=\"toggle\" src=\"#{image}.png\">"
    end
    @output.printf " %4.2f%% (%4.2f%%) [%s] %s\n", percent_total, percent_parent, ths(node.count), link(node)
    unless kids.empty?
      if expanded
        @output.print "<ul>"
      else
        @output.print '<ul style="display:none">'
      end
      kids.each do |k, n|
        print_tree n, total_count
      end
      @output.print "</ul>"
    end
    @output.print "</li>"
  end

  def link(node)
    file = File.expand_path(node.name)
    line = 0
    if file =~ /\.rb$/
      "<a href=\"txmt://open?url=file://#{file}&line=#{line}\">#{h(file)}:#{line}</a>"
    else
      h(file)
    end
  end

  def color(p)
    case i = p.to_i
    when 0..5
      "01"
    when 5..10
      "05"
    when 100
      "9"
    else
      "#{i/10}"
    end
  end

  def application
    @options[:application]
  end

  def arguments
    ARGV.join(' ')
  end

  def title
    @title ||= @options.delete(:title) || "ruby heap analysis"
  end

  def threshold
    @options[:threshold] || 0.1
  end

  def expansion
    @options[:expansion] || 10.0
  end

  def min_percent
    @options[:min_percent] || 0.0
  end

  def copy_image_files
    if @output.is_a?(File)
      target_dir = File.dirname(@output.path)
      image_dir = File.dirname(__FILE__) + '/../images'
      %w(empty plus minus).each do |img|
        source_file = "#{image_dir}/#{img}.png"
        target_file = "#{target_dir}/#{img}.png"
        FileUtils.cp(source_file, target_file) unless File.exist?(target_file)
      end
    end
  end

  def print_header
    @output.puts "<html><head>"
    @output.puts '<meta http-equiv="content-type" content="text/html; charset=utf-8">'
    @output.puts "<title>#{h title}</title>"
    print_css
    print_java_script
    @output.puts '</head><body>'
    print_title_bar
    print_commands
    print_help
  end

  def print_footer
    @output.puts '<div id="sentinel"></div></body></html>'
  end

  def print_css
    @output.puts <<-'end_css'
<style type="text/css">
<!--
body {
    font-size:70%;
    padding:0px;
    margin:5px;
    margin-right:0px;
    margin-left:0px;
    background: #ffffff;
}
ul {
    margin-left:0px;
    margin-top:0px;
    margin-bottom:0px;
    padding-left:0px;
    list-style-type:none;
}
li {
    margin-left:11px;
    padding:0px;
    white-space:nowrap;
    border-top:1px solid #cccccc;
    border-left:1px solid #cccccc;
    border-bottom:none;
}
.thread {
    margin-left:11px;
    background:#708090;
    padding-top:3px;
    padding-left:12px;
    padding-bottom:2px;
    border-left:1px solid #CCCCCC;
    border-top:1px solid #CCCCCC;
    font-weight:bold;
}
.hidden {
    display:none;
    width:0px;
    height:0px;
    margin:0px;
    padding:0px;
    border-style:none;
}
.color01 { background:#adbdeb }
.color05 { background:#9daddb }
.color0 { background:#8d9dcb }
.color1 { background:#89bccb }
.color2 { background:#56e3e7 }
.color3 { background:#32cd70 }
.color4 { background:#a3d53c }
.color5 { background:#c4cb34 }
.color6 { background:#dcb66d }
.color7 { background:#cda59e }
.color8 { background:#be9d9c }
.color9 { background:#cf947a }
#commands {
    font-size:10pt;
    padding:10px;
    margin-left:11px;
    margin-bottom:0px;
    margin-top:0px;
    background:#708090;
    border-top:1px solid #cccccc;
    border-left:1px solid #cccccc;
    border-bottom:none;
}
#titlebar {
    font-size:10pt;
    padding:10px;
    margin-left:11px;
    margin-bottom:0px;
    margin-top:10px;
    background:#8090a0;
    border-top:1px solid #cccccc;
    border-left:1px solid #cccccc;
    border-bottom:none;
}
#help {
    font-size:10pt;
    padding:10px;
    margin-left:11px;
    margin-bottom:0px;
    margin-top:0px;
    background:#8090a0;
    display:none;
    border-top:1px solid #cccccc;
    border-left:1px solid #cccccc;
    border-bottom:none;
}
#hotspots_by_file, #hotspots_by_class {
    font-size:10pt;
    border:1px solid #cccccc;
    background:#9595a9;
    padding: 3px;
}
input {
    margin-left:10px;
}
#sentinel {
    height: 400px;
    margin-left:11px;
    background:#8090a0;
    border-top:1px solid #cccccc;
    border-left:1px solid #cccccc;
    border-bottom:none;
 }
-->
</style>
end_css
    end

  def print_java_script
    @output.puts <<-'end_java_script'
<script type="text/javascript">
/*
   Copyright (C) 2005-2009  Stefan Kaes
   skaes@railsexpress.de
*/

function rootNode() {
  return currentThread;
}

function hideUL(node) {
  var lis = node.childNodes
  var l = lis.length;
  for (var i=0; i < l ; i++ ) {
    hideLI(lis[i]);
  }
}

function showUL(node) {
  var lis = node.childNodes;
  var l = lis.length;
  for (var i=0; i < l ; i++ ) {
    showLI(lis[i]);
  }
}

function findUlChild(li){
  var ul = li.childNodes[2];
  while (ul && ul.nodeName != "UL") {
    ul = ul.nextSibling;
  }
  return ul;
}

function isLeafNode(li) {
  var img = li.firstChild;
  return (img.src.indexOf('empty.png') > -1);
}

function hideLI(li) {
  if (isLeafNode(li))
    return;

  var img = li.firstChild;
  img.src = 'plus.png';

  var ul = findUlChild(li);
  if (ul) {
    ul.style.display = 'none';
    hideUL(ul);
  }
}

function showLI(li) {
  if (isLeafNode(li))
    return;

  var img = li.firstChild;
  img.src = 'minus.png';

  var ul = findUlChild(li);
  if (ul) {
    ul.style.display = 'block';
    showUL(ul);
  }
}

function toggleLI(li) {
  var img = li.firstChild;
  if (img.src.indexOf("minus.png")>-1)
    hideLI(li);
  else {
    if (img.src.indexOf("plus.png")>-1)
      showLI(li);
  }
}

function aboveThreshold(text, threshold) {
  var match = text.match(/\d+[.,]\d+/);
  return (match && parseFloat(match[0].replace(/,/, '.'))>=threshold);
}

function setThresholdLI(li, threshold) {
  var img = li.firstChild;
  var text = img.nextSibling;
  var ul = findUlChild(li);

  var visible = aboveThreshold(text.nodeValue, threshold) ? 1 : 0;

  var count = 0;
  if (ul) {
    count = setThresholdUL(ul, threshold);
  }
  if (count>0) {
    img.src = 'minus.png';
  }
  else {
    img.src = 'empty.png';
  }
  if (visible) {
    li.style.display = 'block'
  }
  else {
    li.style.display = 'none'
  }
  return visible;
}

function setThresholdUL(node, threshold) {
  var lis = node.childNodes;
  var l = lis.length;

  var count = 0;
  for ( var i = 0; i < l ; i++ ) {
    count = count + setThresholdLI(lis[i], threshold);
  }

  var visible = (count > 0) ? 1 : 0;
  if (visible) {
    node.style.display = 'block';
  }
  else {
    node.style.display = 'none';
  }
  return visible;
}

function toggleChildren(img, event) {
  event.cancelBubble=true;

  if (img.src.indexOf('empty.png') > -1)
    return;

  var minus = (img.src.indexOf('minus.png') > -1);

  if (minus) {
    img.src = 'plus.png';
  }
  else
    img.src = 'minus.png';

  var li = img.parentNode;
  var ul = findUlChild(li);
  if (ul) {
    if (minus)
      ul.style.display = 'none';
    else
      ul.style.display = 'block';
  }
  if (minus)
    moveSelectionIfNecessary(li);
}

function showChildren(li) {
  var img = li.firstChild;
  if (img.src.indexOf('empty.png') > -1)
    return;
  img.src = 'minus.png';

  var ul = findUlChild(li);
  if (ul) {
    ul.style.display = 'block';
  }
}

function setThreshold() {
 var tv = document.getElementById("threshold").value;
 if (tv.match(/[0-9]+([.,][0-9]+)?/)) {
   var f = parseFloat(tv.replace(/,/, '.'));
   var threads = document.getElementsByName("thread");
   var l = threads.length;
   for ( var i = 0; i < l ; i++ ) {
     setThresholdUL(threads[i], f);
   }
   var p = selectedNode;
   while (p && p.style.display=='none')
     p=p.parentNode.parentNode;
   if (p && p.nodeName=="LI")
    selectNode(p);
 }
 else {
   alert("Please specify a decimal number as threshold value!");
 }
}

function collapseAll(event) {
  event.cancelBubble=true;
  var threads = document.getElementsByName("thread");
  var l = threads.length;
  for ( var i = 0; i < l ; i++ ) {
    hideUL(threads[i]);
  }
  selectNode(rootNode(), null);
}

function expandAll(event) {
  event.cancelBubble=true;
  var threads = document.getElementsByName("thread");
  var l = threads.length;
  for ( var i = 0; i < l ; i++ ) {
    showUL(threads[i]);
  }
}

function toggleHelp(node) {
  var help = document.getElementById("help");
  if (node.value == "Show Help") {
    node.value = "Hide Help";
    help.style.display = 'block';
  }
  else {
    node.value = "Show Help";
    help.style.display = 'none';
  }
}

var selectedNode = null;
var selectedColor = null;
var selectedThread = null;

function descendentOf(a,b){
  while (a!=b && b!=null)
    b=b.parentNode;
  return (a==b);
}

function moveSelectionIfNecessary(node){
  if (descendentOf(node, selectedNode))
    selectNode(node, null);
}

function selectNode(node, event) {
  if (event) {
    event.cancelBubble = true;
    thread = findThread(node);
    selectThread(thread);
  }
  if (selectedNode) {
    selectedNode.style.background = selectedColor;
  }
  selectedNode = node;
  selectedColor = node.style.background;
  selectedNode.style.background = "red";
  selectedNode.scrollIntoView();
  window.scrollBy(0,-400);
}

function moveUp(){
  var p = selectedNode.previousSibling;
  while (p && p.style.display == 'none')
    p = p.previousSibling;
  if (p && p.nodeName == "LI") {
    selectNode(p, null);
  }
}

function moveDown(){
  var p = selectedNode.nextSibling;
  while (p && p.style.display == 'none')
    p = p.nextSibling;
  if (p && p.nodeName == "LI") {
    selectNode(p, null);
  }
}

function moveLeft(){
  var p = selectedNode.parentNode.parentNode;
  if (p && p.nodeName=="LI") {
    selectNode(p, null);
  }
}

function moveRight(){
  if (!isLeafNode(selectedNode)) {
    showChildren(selectedNode);
    var ul = findUlChild(selectedNode);
    if (ul) {
      selectNode(ul.firstChild, null);
    }
  }
}

function moveForward(){
  if (isLeafNode(selectedNode)) {
    var p = selectedNode;
    while ((p.nextSibling == null || p.nextSibling.style.display=='none') && p.nodeName=="LI") {
      p = p.parentNode.parentNode;
    }
    if (p.nodeName=="LI")
      selectNode(p.nextSibling, null);
  }
  else {
    moveRight();
  }
}

function isExpandedNode(li){
  var img = li.firstChild;
  return(img.src.indexOf('minus.png')>-1);
}

function moveBackward(){
  var p = selectedNode;
  var q = p.previousSibling;
  while (q != null && q.style.display=='none')
    q = q.previousSibling;
  if (q == null) {
    p = p.parentNode.parentNode;
  } else {
    while (!isLeafNode(q) && isExpandedNode(q)) {
      q = findUlChild(q).lastChild;
      while (q.style.display=='none')
        q = q.previousSibling;
    }
    p = q;
  }
  if (p.nodeName=="LI")
    selectNode(p, null);
}

function moveHome() {
  selectNode(currentThread);
}

var currentThreadIndex = null;

function findThread(node){
  while (node && node.parentNode.nodeName!="BODY") {
    node = node.parentNode;
  }
  return node.firstChild;
}

function selectThread(node){
  var threads = document.getElementsByName("thread");
  currentThread = node;
  for (var i=0; i<threads.length; i++) {
    if (threads[i]==currentThread.parentNode)
      currentThreadIndex = i;
  }
}

function nextThread(){
  var threads = document.getElementsByName("thread");
  if (currentThreadIndex==threads.length-1)
    currentThreadIndex = 0;
  else
    currentThreadIndex += 1
  currentThread = threads[currentThreadIndex].firstChild;
  selectNode(currentThread, null);
}

function previousThread(){
  var threads = document.getElementsByName("thread");
  if (currentThreadIndex==0)
    currentThreadIndex = threads.length-1;
  else
    currentThreadIndex -= 1
  currentThread = threads[currentThreadIndex].firstChild;
  selectNode(currentThread, null);
}

function switchThread(node, event){
  event.cancelBubble = true;
  selectThread(node.nextSibling.firstChild);
  selectNode(currentThread, null);
}

function handleKeyEvent(event){
  var code = event.charCode ? event.charCode : event.keyCode;
  var str = String.fromCharCode(code);
  switch (str) {
    case "a": moveLeft();  break;
    case "s": moveDown();  break;
    case "d": moveRight(); break;
    case "w": moveUp();    break;
    case "f": moveForward(); break;
    case "b": moveBackward(); break;
    case "x": toggleChildren(selectedNode.firstChild, event); break;
    case "*": toggleLI(selectedNode); break;
    case "n": nextThread(); break;
    case "h": moveHome(); break;
    case "p": previousThread(); break;
  }
}
document.onkeypress=function(event){ handleKeyEvent(event) };

window.onload=function(){
  var images = document.getElementsByTagName("img");
  for (var i=0; i<images.length; i++) {
    var img = images[i];
    if (img.className == "toggle") {
      img.onclick = function(event){ toggleChildren(this, event); };
    }
  }
  var divs = document.getElementsByTagName("div");
  for (i=0; i<divs.length; i++) {
    var div = divs[i];
    if (div.className == "thread")
      div.onclick = function(event){ switchThread(this, event) };
  }
  var lis = document.getElementsByTagName("li");
  for (var i=0; i<lis.length; i++) {
    lis[i].onclick = function(event){ selectNode(this, event); };
  }
  var threads = document.getElementsByName("thread");
  currentThreadIndex = 0;
  currentThread = threads[0].firstChild;
  selectNode(currentThread, null);
}
</script>
end_java_script
  end

  def print_title_bar
    @output.puts <<-"end_title_bar"
<div id="titlebar">
Ruby heap analysis, generated on #{Time.now}.
Live data set size:</b> #{ths(@result.count)}.
<a id="hotspots_by_file" href="#{@hotspot_filename}">View Hotspots by File</a>
<a id="hotspots_by_class" href="#{@clazz_hotspots_filename}">View Hotspots by Class</a>
</div>
end_title_bar
  end

  def print_commands
    @output.puts <<-"end_commands"
<div id="commands">
<span style="font-size: 11pt; font-weight: bold;">Threshold:</span>
<input value="#{h threshold}" size="3" id="threshold" type="text">
<input value="Apply" onclick="setThreshold();" type="submit">
<input value="Expand All" onclick="expandAll(event);" type="submit">
<input value="Collapse All" onclick="collapseAll(event);" type="submit">
<input value="Show Help" onclick="toggleHelp(this);" type="submit">
</div>
end_commands
  end

  def print_help
    @output.puts <<-'end_help'
<div style="display: none;" id="help">
<img src="empty.png"> Enter a decimal value <i>d</i> into the threshold field and click "Apply"
to hide all nodes marked with time values lower than <i>d</i>.<br>
<img src="empty.png"> Click on "Expand All" for full tree expansion.<br>
<img src="empty.png"> Click on "Collapse All" to show only top level nodes.<br>
<img src="empty.png"> Use a, s, d, w as in Quake or Urban Terror to navigate the tree.<br>
<img src="empty.png"> Use f and b to navigate the tree in preorder forward and backwards.<br>
<img src="empty.png"> Use x to toggle visibility of a subtree.<br>
<img src="empty.png"> Use * to expand/collapse a whole subtree.<br>
<img src="empty.png"> Use h to navigate to object type root.<br>
<img src="empty.png"> Use n and p to navigate between object types.<br>
<img src="empty.png"> Click on background to move focus to a subtree.<br>
</div>
end_help
  end
end


# parse options
o = OpenStruct.new
o.title = "Ruby Heap Dump"
o.output = "heap_analysis.html"

parser = OptionParser.new do |opts|
  opts.banner = "Usage: analyze_heap_dump [options] file"

  opts.separator ""
  opts.separator "Options:"

  opts.on("-t", "--title T",
          "Specify the title to be used in the generated html") do |t|
    o.title = t
  end

  opts.on("-o", "--out FILE",
          "Specify output file") do |f|
    o.output = f
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
parser.parse!(ARGV)

dump = Node.create(ARGV[0])
printer = HeapPrinter.new(dump)
printer.print(:filename => o.output)

__END__

#  Copyright (C) 2009  Stefan Kaes
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
